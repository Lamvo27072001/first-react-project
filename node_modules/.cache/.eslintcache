[{"D:\\Users\\first-react-project\\src\\index.jsx":"1","D:\\Users\\first-react-project\\src\\App.jsx":"2","D:\\Users\\first-react-project\\src\\Components\\TodoForm.jsx":"3","D:\\Users\\first-react-project\\src\\Components\\TodoList.jsx":"4","D:\\Users\\first-react-project\\src\\Components\\Todo.jsx":"5"},{"size":447,"mtime":1657720208563,"results":"6","hashOfConfig":"7"},{"size":188,"mtime":1657896559832,"results":"8","hashOfConfig":"7"},{"size":702,"mtime":1657896875292,"results":"9","hashOfConfig":"7"},{"size":841,"mtime":1657898672786,"results":"10","hashOfConfig":"7"},{"size":661,"mtime":1657898491721,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"30bdwv",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},"D:\\Users\\first-react-project\\src\\index.jsx",[],[],"D:\\Users\\first-react-project\\src\\App.jsx",["29"],[],"D:\\Users\\first-react-project\\src\\Components\\TodoForm.jsx",[],[],"D:\\Users\\first-react-project\\src\\Components\\TodoList.jsx",[],[],"D:\\Users\\first-react-project\\src\\Components\\Todo.jsx",["30","31","32","33"],[],"import React,{useState} from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport {RicloseCircleLine} from 'react-icons/ri'\r\nimport {TiEdit} from 'react-icons/ti'\r\n\r\n\r\n\r\nfunction Todo({todos, completeTodo}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n  return todos.map((todo,index) => {\r\n    <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n        <div key={todo.id} onClick={()=> completeTodo(todo.id)}>{todo.text}</div>\r\n        <div className='icons'>\r\n            <RicloseCircleLine/>\r\n            <TiEdit/>\r\n        </div>\r\n    </div>\r\n  })\r\n    \r\n  \r\n}\r\n\r\nexport default Todo",[],{"ruleId":"34","severity":1,"message":"35","line":3,"column":8,"nodeType":"36","messageId":"37","endLine":3,"endColumn":16},{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":16},{"ruleId":"34","severity":1,"message":"38","line":9,"column":12,"nodeType":"36","messageId":"37","endLine":9,"endColumn":16},{"ruleId":"34","severity":1,"message":"39","line":9,"column":18,"nodeType":"36","messageId":"37","endLine":9,"endColumn":25},{"ruleId":"40","severity":1,"message":"41","line":14,"column":33,"nodeType":"42","messageId":"43","endLine":14,"endColumn":35},"no-unused-vars","'TodoForm' is defined but never used.","Identifier","unusedVar","'edit' is assigned a value but never used.","'setEdit' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]